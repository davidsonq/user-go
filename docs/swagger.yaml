basePath: /api/
definitions:
  models.ErrosNoBody:
    properties:
      error:
        type: string
    type: object
  models.ExampleInputUser:
    properties:
      email:
        type: string
      nickname:
        type: string
      password:
        type: string
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
    type: object
  models.LoginUser:
    properties:
      email:
        maxLength: 50
        type: string
      password:
        maxLength: 16
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  models.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      nickname:
        type: string
      updated_at:
        type: string
    type: object
host: usergolang.onrender.com
info:
  contact:
    email: davidsonquaresma@hotmail.com
  description: This is a microservice built to manage users, with authentication and
    login features.
  license:
    name: MIT
    url: https://github.com/davidsonq/user-go/blame/main/LICENSE
  title: User Management Microservice with Login System
  version: "1.0"
paths:
  /users:
    post:
      consumes:
      - application/json
      description: Create new user
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.ExampleInputUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: The body of the request is empty or lack of Nickname, Email,
            Password in the body of the request, the email has to be a valid email
            and nickname has to have at least 3 characters and password at least 6.
          schema:
            $ref: '#/definitions/models.ErrosNoBody'
        "401":
          description: This error is generated when trying to register a nickname
            or email already registered
          schema:
            $ref: '#/definitions/models.ErrosNoBody'
      summary: Create user
      tags:
      - users
  /users/:id:
    delete:
      consumes:
      - application/json
      description: Deleted User
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: User not exist
          schema:
            $ref: '#/definitions/models.ErrosNoBody'
        "401":
          description: When you pass an invalid token in the request header or it
            was not sent for authentication.
          schema:
            $ref: '#/definitions/models.ErrosNoBody'
      security:
      - ApiKeyAuth: []
      summary: Delete User
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Update info user
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: The body of the request is empty or lack of Nickname, Email,
            Password in the body of the request, the email has to be a valid email
            and nickname has to have at least 3 characters and password at least 6.
          schema:
            $ref: '#/definitions/models.ErrosNoBody'
        "401":
          description: When you pass an invalid token in the request header or it
            was not sent for authentication.
          schema:
            $ref: '#/definitions/models.ErrosNoBody'
        "409":
          description: User not exist
          schema:
            $ref: '#/definitions/models.ErrosNoBody'
      security:
      - ApiKeyAuth: []
      summary: Update User
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Create new session login
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: The request body is empty or missing Email, Password in the
            request body, the email has to be a valid email and the password has at
            least 6 characters.
          schema:
            $ref: '#/definitions/models.ErrosNoBody'
        "403":
          description: This error is generated when trying to login with an invalid
            email or password.
          schema:
            $ref: '#/definitions/models.ErrosNoBody'
      summary: Login User
      tags:
      - login
  /users/profile:
    get:
      consumes:
      - application/json
      description: Seach profile user
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "401":
          description: When you pass an invalid token in the request header or it
            was not sent for authentication.
          schema:
            $ref: '#/definitions/models.ErrosNoBody'
      security:
      - ApiKeyAuth: []
      summary: Get Profile
      tags:
      - users
swagger: "2.0"
